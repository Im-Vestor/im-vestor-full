generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum Currency {
    EUR
    USD
    BRL
}

enum ProjectStatus {
    ACTIVE
    INACTIVE
    COMPLETED
}

enum SupportTicketStatus {
    OPEN
    CLOSED
}

model Country {
    id           Int            @id @default(autoincrement())
    name         String
    numericCode  String
    emoji        String
    states       State[]
    Investor     Investor[]
    Entrepreneur Entrepreneur[]
    Project      Project[]
    Incubator    Incubator[]
    VcGroup      VcGroup[]
}

model State {
    id           Int            @id @default(autoincrement())
    name         String
    countryId    Int
    country      Country        @relation(fields: [countryId], references: [id])
    Investor     Investor[]
    Entrepreneur Entrepreneur[]
    Project      Project[]
    Incubator    Incubator[]
    VcGroup      VcGroup[]
}

model Area {
    id        String      @id @default(uuid())
    name      String
    Project   Project[]
    Investor  Investor[]
    Incubator Incubator[]
    VcGroup   VcGroup[]
}

model Offer {
    id          String      @id @default(uuid())
    name        String
    description String
    Incubator   Incubator[]
}

model Referral {
    id       String   @id @default(uuid())
    name     String
    joinedAt DateTime @default(now())

    referrer   User   @relation("ReferrerToUser", fields: [referrerId], references: [id])
    referrerId String

    referred   User   @relation("ReferredToUser", fields: [referredId], references: [id])
    referredId String
}

enum UserType {
    ENTREPRENEUR
    INVESTOR
    PARTNER
    VC_GROUP
    INCUBATOR
    ADMIN
}

model User {
    id           String        @id @default(uuid())
    email        String        @unique
    imageUrl     String?
    referralCode String        @unique
    userType     UserType
    investor     Investor?
    entrepreneur Entrepreneur?
    partner      Partner?
    vcGroup      VcGroup?
    incubator    Incubator?

    referralsAsReferrer Referral[] @relation("ReferrerToUser")
    referralsAsReferred Referral[] @relation("ReferredToUser")

    followingConnections Connection[]    @relation("Follower")
    followerConnections  Connection[]    @relation("Following")
    Notification         Notification[]
    supportTickets       SupportTicket[]
}

model VcGroup {
    id                    String    @id @default(uuid())
    name                  String
    bio                   String?
    description           String?
    website               String?
    email                 String
    logo                  String?
    phone                 String?
    openingDate           DateTime?
    managedCapital        Float?
    averageInvestmentSize Float?

    brochureUrl      String?
    investmentPolicy String?

    favoriteProjects Project[]     @relation("FavoriteVcGroups")
    investedProjects Project[]     @relation("InvestedVcGroups")
    projectViews     ProjectView[]
    negotiations     Negotiation[]

    meetings Meeting[] @relation("MeetingVcGroups")

    interestedAreas Area[]
    stages          ProjectStage[]
    members         VcGroupMember[]

    linkedinUrl String?
    youtubeUrl  String?
    instagram   String?
    twitter     String?

    principalStartups String?
    principalExits    String?

    state   State?   @relation(fields: [stateId], references: [id])
    country Country? @relation(fields: [countryId], references: [id])

    userId String @unique
    user   User   @relation(fields: [userId], references: [id])

    stateId   Int?
    countryId Int?
}

model VcGroupMember {
    id    String  @id @default(uuid())
    name  String
    photo String?
    role  String
    email String
    phone String?
    owner Boolean @default(false)

    vcGroup   VcGroup @relation(fields: [vcGroupId], references: [id])
    vcGroupId String
}

model Incubator {
    id                          String    @id @default(uuid())
    name                        String
    bio                         String?
    description                 String?
    website                     String?
    logo                        String?
    phone                       String?
    email                       String
    openingDate                 DateTime?
    startupsIncubated           Int?
    startupsInIncubator         Int?
    acceptStartupsOutsideRegion Boolean   @default(false)
    brochureUrl                 String?

    offers Offer[]
    areas  Area[]

    projects Project[]

    meetings Meeting[] @relation("MeetingIncubators")

    ownerName  String?
    ownerRole  String?
    ownerPhone String?
    ownerEmail String?

    linkedinUrl String?
    facebook    String?
    instagram   String?
    twitter     String?

    associatedIncubators   String?
    associatedUniversities String?
    activePrograms         String?

    state   State?   @relation(fields: [stateId], references: [id])
    country Country? @relation(fields: [countryId], references: [id])

    userId String @unique
    user   User   @relation(fields: [userId], references: [id])

    stateId   Int?
    countryId Int?
}

model Partner {
    id          String  @id @default(uuid())
    firstName   String
    lastName    String
    companyName String?
    mobileFone  String?

    userId String @unique
    user   User   @relation(fields: [userId], references: [id])
}

model Investor {
    id                 String    @id @default(uuid())
    firstName          String
    lastName           String
    mobileFone         String?
    fiscalCode         String?
    investmentMinValue Float
    investmentMaxValue Float
    birthDate          DateTime?
    photo              String?
    banner             String?
    about              String?
    currency           Currency  @default(USD)
    state              State?    @relation(fields: [stateId], references: [id])
    country            Country?  @relation(fields: [countryId], references: [id])

    favoriteProjects Project[]     @relation("FavoriteInvestors")
    investedProjects Project[]     @relation("InvestedInvestors")
    projectViews     ProjectView[]
    areas            Area[]
    negotiations     Negotiation[]

    userId String @unique
    user   User   @relation(fields: [userId], references: [id])

    stateId   Int?
    countryId Int?

    meetings Meeting[] @relation("MeetingInvestors")
}

model Meeting {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    url       String
    startDate DateTime
    endDate   DateTime

    negotiation   Negotiation? @relation(fields: [negotiationId], references: [id])
    negotiationId String?

    entrepreneur   Entrepreneur? @relation(fields: [entrepreneurId], references: [id])
    entrepreneurId String?

    investors  Investor[]  @relation("MeetingInvestors")
    vcGroups   VcGroup[]   @relation("MeetingVcGroups")
    incubators Incubator[] @relation("MeetingIncubators")
}

model Entrepreneur {
    id          String    @id @default(uuid())
    firstName   String
    lastName    String
    mobileFone  String?
    companyName String?
    companyRole String?
    fiscalCode  String?
    birthDate   DateTime?
    photo       String?
    banner      String?
    about       String?
    state       State?    @relation(fields: [stateId], references: [id])
    country     Country?  @relation(fields: [countryId], references: [id])

    preferredHours PreferredHours[]

    projects Project[]

    userId String @unique
    user   User   @relation(fields: [userId], references: [id])

    stateId   Int?
    countryId Int?
    meetings  Meeting[]
}

model PreferredHours {
    id     String               @id @default(uuid())
    period PreferredHoursPeriod
    time   String

    entrepreneur   Entrepreneur @relation(fields: [entrepreneurId], references: [id])
    entrepreneurId String
}

enum PreferredHoursPeriod {
    MORNING
    AFTERNOON
    EVENING
}

enum ProjectStage {
    PRE_SEED
    SEED
    SERIES_A
    SERIES_B
    SERIES_C
    IPO
}

model Project {
    id              String        @id @default(uuid())
    name            String
    quickSolution   String?
    website         String?
    foundationDate  DateTime?
    stage           ProjectStage?
    country         Country?      @relation(fields: [countryId], references: [id])
    state           State?        @relation(fields: [stateId], references: [id])
    about           String?
    status          ProjectStatus @default(ACTIVE)
    startInvestment Float?
    investorSlots   Int?
    annualRevenue   Float?
    monthsToReturn  Int?
    equity          Float?
    investmentGoal  Float
    logo            String?
    currency        Currency      @default(USD)

    // New fields for photos and video
    photo1   String?
    photo2   String?
    photo3   String?
    photo4   String?
    videoUrl String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    knowYourNumbers KnowYourNumbers?
    faqs            ProjectFaq[]
    files           File[]
    views           ProjectView[]
    negotiation     Negotiation?

    Entrepreneur   Entrepreneur? @relation(fields: [entrepreneurId], references: [id])
    entrepreneurId String?

    favoriteInvestors  Investor[] @relation("FavoriteInvestors")
    favoriteInvestorId String?

    favoriteVcGroups  VcGroup[] @relation("FavoriteVcGroups")
    favoriteVcGroupId String?

    investedInvestors  Investor[] @relation("InvestedInvestors")
    investedInvestorId String?

    investedVcGroups  VcGroup[] @relation("InvestedVcGroups")
    investedVcGroupId String?

    sector      Area       @relation(fields: [sectorId], references: [id])
    sectorId    String
    countryId   Int?
    stateId     Int?
    Incubator   Incubator? @relation(fields: [incubatorId], references: [id])
    incubatorId String?
}

enum NegotiationStage {
    PITCH
    NEGOTIATION
    DETAILS
    CLOSED
    CANCELLED
}

model Negotiation {
    id String @id @default(uuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    stage NegotiationStage @default(PITCH)

    investorActionNeeded     Boolean @default(false)
    entrepreneurActionNeeded Boolean @default(false)

    investorAgreedToGoToNextStage     Boolean @default(false)
    entrepreneurAgreedToGoToNextStage Boolean @default(false)

    meetings Meeting[]

    investor   Investor? @relation(fields: [investorId], references: [id])
    investorId String?

    project   Project  @relation(fields: [projectId], references: [id])
    projectId String   @unique
    VcGroup   VcGroup? @relation(fields: [vcGroupId], references: [id])
    vcGroupId String?
}

model KnowYourNumbers {
    id      String   @id @default(uuid())
    answers Answer[]

    project   Project @relation(fields: [projectId], references: [id])
    projectId String  @unique
}

model Answer {
    id         String @id @default(uuid())
    answer     String
    questionId String

    KnowYourNumbers   KnowYourNumbers? @relation(fields: [knowYourNumbersId], references: [id])
    knowYourNumbersId String?
}

model ProjectFaq {
    id        String  @id @default(uuid())
    question  String
    answer    String
    project   Project @relation(fields: [projectId], references: [id])
    projectId String
}

model ProjectView {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())

    investor   Investor? @relation(fields: [investorId], references: [id])
    investorId String?

    project   Project  @relation(fields: [projectId], references: [id])
    projectId String
    VcGroup   VcGroup? @relation(fields: [vcGroupId], references: [id])
    vcGroupId String?
}

model File {
    id   String @id @default(uuid())
    name String
    type String
    size Int
    url  String

    Project   Project? @relation(fields: [projectId], references: [id])
    projectId String?
}

model Connection {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())

    follower   User   @relation("Follower", fields: [followerId], references: [id])
    followerId String

    following   User   @relation("Following", fields: [followingId], references: [id])
    followingId String

    @@unique([followerId, followingId])
}

enum NotificationType {
    PROJECT_VIEW
    MEETING_CREATED
    MEETING_CANCELLED
    NEGOTIATION_CANCELLED
    NEGOTIATION_GO_TO_NEXT_STAGE
    // POKE
    // MESSAGE
    // INVESTMENT_REQUEST
    // INVESTMENT_CONFIRMATION
    // INVESTMENT_REJECTED
    // INVESTMENT_CONFIRMED
    // INVESTMENT_CANCELLED
}

model Notification {
    id        String           @id @default(uuid())
    createdAt DateTime         @default(now())
    type      NotificationType
    read      Boolean          @default(false)

    user   User   @relation(fields: [userId], references: [id])
    userId String
}

model SupportTicket {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    subject String
    message String

    status SupportTicketStatus @default(OPEN)

    user   User   @relation(fields: [userId], references: [id])
    userId String
}

model PotentialUser {
    id        String   @id @default(uuid())
    name      String
    email     String
    phone     String?
    createdAt DateTime @default(now())
    event     String?
}
